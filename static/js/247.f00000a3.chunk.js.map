{"version":3,"file":"static/js/247.f00000a3.chunk.js","mappings":"gNAyDA,UAtDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KA4BA,OA1BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,iGACbC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NANa,kBAWMC,MAAM,sCAAD,OACYZ,EADZ,2BAE1BO,GAbe,cAWXM,EAXW,gBAeEA,EAASC,OAfX,OAeXC,EAfW,OAgBXC,EAAOD,EAAKC,KAClBZ,EAAWY,GAjBM,kDAmBjBC,QAAQC,MAAM,4BAA6B,KAAMC,SAnBhC,0DAAH,qDAsBlBb,GACD,GAAE,CAACN,KAGF,wBACGG,GAAWA,EAAQiB,OAAS,EAC3BjB,EAAQkB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACV,2BACE,gBACEC,IACEH,EAAY,0CAC2BA,GACnC,yDAENI,IAAKH,KAEP,yBAAG,SAAOA,MACV,yBAAG,cAAYC,OAVRH,EADC,KAeZ,uBAAG,mDAIV,C,sBCvDD,SAASM,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOnB,GAEP,YADAa,EAAOb,EAET,CAEIkB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOG,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState();\n\n  useEffect(() => {\n    const fetchCredits = async () => {\n      const options = {\n        method: 'GET',\n        headers: {\n          accept: 'application/json',\n          Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyNzhiMWJkMjk1YWUyZGI4YWYzMjhjNWE5ZDQzMGE3NyIsInN1YiI6IjY0N2IxYmE1ZTMyM2YzMDEwNjE1MDc1MCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.vxLHfnX6-9KADyJ-ltI_WHyCFtNAuDJ1qUjAWK6Nndc',\n        },\n      };\n\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\n          options\n        );\n        const data = await response.json();\n        const cast = data.cast;\n        setCredits(cast);\n      } catch (error) {\n        console.error('Couldnt fetch the credits', error.message);\n      }\n    };\n    fetchCredits();\n  }, [movieId]);\n\n  return (\n    <ul>\n      {credits && credits.length > 0 ? (\n        credits.map(({ id, profile_path, name, character }) => (\n          <li key={id}>\n            <img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                  : 'https://placehold.co/200x300/blue/yellow?text=No+Image'\n              }\n              alt={name}\n            />\n            <p>Name: {name}</p>\n            <p>Character: {character}</p>\n          </li>\n        ))\n      ) : (\n        <p>The cast list is not available for this movie</p>\n      )}\n    </ul>\n  );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useParams","useState","credits","setCredits","useEffect","fetchCredits","options","method","headers","accept","Authorization","fetch","response","json","data","cast","console","error","message","length","map","id","profile_path","name","character","src","alt","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}